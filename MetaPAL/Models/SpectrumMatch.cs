using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Omics.SpectrumMatch;

namespace MetaPAL.Models
{
    [Table("SpectrumMatch")]
    public class SpectrumMatch
    {
        [Key]
        public int Id { get; set; } //autogenerated unique id

        #region Protein Information

        [Required]
        public string Accession { get; set; }

        [Required]
        public string BaseSequence { get; set; }

        [Required]
        public string FullSequence { get; set; }

        public string? EssentialSequence { get; set; }

        public double? MonoisotopicMass { get; set; }

        public string? Name { get; set; }
        public string? GeneName { get; set; }
        public string? OrganismName { get; set; }
        public string? IntersectingSequenceVariations { get; set; }
        public string? IdentifiedSequenceVariations { get; set; }
        public string? Description { get; set; }
        public string? SpliceSites { get; set; }

        // Variables below that are strings would ideally be characters or have a maximum length
        // This will speed up the database queries, and is performed as shown below.
        // However, any limit set could be ran into by ambiguous search results, leading to a failure to upload
        //[MaxLength(16)]
        public string? StartAndEndResiduesInParentSequence { get; set; }
        public string? PreviousResidue { get; set; }
        public string? NextResidue { get; set; }

        #endregion

        #region Spectral Information

        // TODO: Turn into a foreign key to the datafile table
        public string FileNameWithoutExtension { get; set; }

        [Required]
        public int PrecursorScanNumber { get; set; }

        [Required]
        public int Ms2ScanNumber { get; set; }

        [Required]
        public double PrecursorCharge { get; set; }

        [Required]
        public double PrecursorMass { get; set; }

        [Required]
        public double PrecursorMz { get; set; }

        public double? RetentionTime { get; set; }

        public double? TotalIonCurrent { get; set; }


        #endregion

        #region Search Information

        // TOTHINK: Do we want to make a separate table for this?
        // If not, we can just make this a string and parse out the relevant information only when necessary
        public string MatchedFragmentIons { get; set; }
        public double? Score { get; set; }
        public double? SpectrumMatchCount { get; set; }
        public double? SpectralAngle { get; set; }
        public double? PEP { get; set; }
        public double? PEP_QValue { get; set; }
        public double? QValue { get; set; }
        public double? QValueNotch { get; set; }
        public double? DeltaScore { get; set; }
        public string? DecoyContamTarget { get; set; }
        public string? Notch { get; set; }
        public string? AmbiguityLevel { get; set; }
        public int? MissedCleavage { get; set; }
        public double? MassDiffDa { get; set; }
        public double? MassDiffPpm { get; set; }

        #endregion

        
        public SpectrumMatch()
        {
                
        }

        public static SpectrumMatch FromSpectrumMatchTsv(SpectrumMatchFromTsv smFromTsv)
        {
            return new SpectrumMatch()
            {
                // Protein Information
                Accession = smFromTsv.Accession,
                BaseSequence = smFromTsv.BaseSeq,
                FullSequence = smFromTsv.FullSequence,
                EssentialSequence = smFromTsv.EssentialSeq,
                MonoisotopicMass = double.Parse(smFromTsv.MonoisotopicMass),
                Name = smFromTsv.Name,
                GeneName = smFromTsv.GeneName,
                OrganismName = smFromTsv.OrganismName,
                IdentifiedSequenceVariations = smFromTsv.IdentifiedSequenceVariations,
                IntersectingSequenceVariations = smFromTsv.IntersectingSequenceVariations,
                Description = smFromTsv.Description,
                SpliceSites = smFromTsv.SpliceSites,
                StartAndEndResiduesInParentSequence = smFromTsv.StartAndEndResiduesInParentSequence,
                PreviousResidue = smFromTsv.PreviousResidue,
                NextResidue = smFromTsv.NextResidue,

                // Spectral Information
                FileNameWithoutExtension = smFromTsv.FileNameWithoutExtension,
                PrecursorScanNumber = smFromTsv.PrecursorScanNum,
                Ms2ScanNumber = smFromTsv.Ms2ScanNumber,
                PrecursorCharge = smFromTsv.PrecursorCharge,
                PrecursorMass = smFromTsv.PrecursorMass,
                PrecursorMz = smFromTsv.PrecursorMz,
                RetentionTime = smFromTsv.RetentionTime,
                TotalIonCurrent = smFromTsv.TotalIonCurrent,

                // Search Information
                MatchedFragmentIons = string.Join('*', smFromTsv.MatchedIons),
                Score = smFromTsv.Score,
                SpectrumMatchCount = smFromTsv.SpectrumMatchCount,
                SpectralAngle = smFromTsv.SpectralAngle,
                PEP = double.IsNaN(smFromTsv.PEP) ? -1 : smFromTsv.PEP,
                PEP_QValue = double.IsNaN(smFromTsv.PEP_QValue) ? -1 : smFromTsv.PEP_QValue,
                QValue = smFromTsv.QValue,
                QValueNotch = smFromTsv.QValueNotch,
                DeltaScore = smFromTsv.DeltaScore,
                DecoyContamTarget = smFromTsv.DecoyContamTarget,
                Notch = smFromTsv.Notch,
                AmbiguityLevel = smFromTsv.AmbiguityLevel,
                MissedCleavage = int.Parse(smFromTsv.MissedCleavage),
                MassDiffDa = double.Parse(smFromTsv.MassDiffDa),
                MassDiffPpm = double.Parse(smFromTsv.MassDiffPpm),
            };
        }
    }
}
