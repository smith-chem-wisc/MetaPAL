// <auto-generated />
using System;
using MetaPAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MetaPAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240104152640_sss")]
    partial class sss
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.23");

            modelBuilder.Entity("MetaPAL.Models.MsDataScanModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DissociationMethod")
                        .HasColumnType("INTEGER");

                    b.Property<float?>("ExperimentalPrecursorMonoisotopicMz")
                        .HasColumnType("REAL");

                    b.Property<string>("FilterString")
                        .HasColumnType("TEXT");

                    b.Property<float?>("IonInjectionTime")
                        .HasColumnType("REAL");

                    b.Property<float?>("IsolationWindowLowerOffset")
                        .HasColumnType("REAL");

                    b.Property<float?>("IsolationWindowTargetMz")
                        .HasColumnType("REAL");

                    b.Property<float?>("IsolationWindowUpperOffset")
                        .HasColumnType("REAL");

                    b.Property<int>("MassAnalyzerType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MassSpectrumType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MsLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NativeId")
                        .HasColumnType("TEXT");

                    b.Property<float?>("NormalizedCollisionEnergy")
                        .HasColumnType("REAL");

                    b.Property<int?>("PrecursorScanNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScanNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScanPolarity")
                        .HasColumnType("INTEGER");

                    b.Property<float?>("ScanStartTime")
                        .HasColumnType("REAL");

                    b.Property<float?>("ScanWindowLowerLimit")
                        .HasColumnType("REAL");

                    b.Property<float?>("ScanWindowUpperLimit")
                        .HasColumnType("REAL");

                    b.Property<int?>("SelectedIonChargeStateGuess")
                        .HasColumnType("INTEGER");

                    b.Property<float?>("SelectedIonIntensity")
                        .HasColumnType("REAL");

                    b.Property<float?>("SelectedIonMz")
                        .HasColumnType("REAL");

                    b.Property<int>("SpectrumRepresentation")
                        .HasColumnType("INTEGER");

                    b.Property<float?>("TotalIonCurrent")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("MsDataScan");
                });

            modelBuilder.Entity("MetaPAL.Models.SpectrumMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Accession")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AmbiguityLevel")
                        .HasColumnType("TEXT");

                    b.Property<string>("BaseSequence")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DecoyContamTarget")
                        .HasColumnType("TEXT");

                    b.Property<double?>("DeltaScore")
                        .HasColumnType("REAL");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("EssentialSequence")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileNameWithoutExtension")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullSequence")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GeneName")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdentifiedSequenceVariations")
                        .HasColumnType("TEXT");

                    b.Property<string>("IntersectingSequenceVariations")
                        .HasColumnType("TEXT");

                    b.Property<double?>("MassDiffDa")
                        .HasColumnType("REAL");

                    b.Property<double?>("MassDiffPpm")
                        .HasColumnType("REAL");

                    b.Property<string>("MatchedFragmentIons")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("MissedCleavage")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("MonoisotopicMass")
                        .HasColumnType("REAL");

                    b.Property<int>("Ms2ScanNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NextResidue")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notch")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrganismName")
                        .HasColumnType("TEXT");

                    b.Property<double?>("PEP")
                        .HasColumnType("REAL");

                    b.Property<double?>("PEP_QValue")
                        .HasColumnType("REAL");

                    b.Property<double>("PrecursorCharge")
                        .HasColumnType("REAL");

                    b.Property<double>("PrecursorMass")
                        .HasColumnType("REAL");

                    b.Property<double>("PrecursorMz")
                        .HasColumnType("REAL");

                    b.Property<int>("PrecursorScanNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PreviousResidue")
                        .HasColumnType("TEXT");

                    b.Property<double?>("QValue")
                        .HasColumnType("REAL");

                    b.Property<double?>("QValueNotch")
                        .HasColumnType("REAL");

                    b.Property<double?>("RetentionTime")
                        .HasColumnType("REAL");

                    b.Property<int>("ScanId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Score")
                        .HasColumnType("REAL");

                    b.Property<double?>("SpectralAngle")
                        .HasColumnType("REAL");

                    b.Property<double?>("SpectrumMatchCount")
                        .HasColumnType("REAL");

                    b.Property<string>("SpliceSites")
                        .HasColumnType("TEXT");

                    b.Property<string>("StartAndEndResiduesInParentSequence")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TotalIonCurrent")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("SpectrumMatch");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
